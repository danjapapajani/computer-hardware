module user_interface
(
	input clk,
	input [8:0] SW,
	input [3:0] KEY,
	output logic o_start,
	output logic [8:0] o_x0,
	output logic [7:0] o_y0,
	output logic [8:0] o_x1,
	output logic [7:0] o_y1,
	output logic [2:0] o_colour,
	output logic [9:0] STATE,
	input logic done
);

logic i_load_x, i_load_y, i_load_c, i_go;
logic o_load_x, o_load_y, o_load_c, o_go, o_init, o_update_coords;

assign i_load_x = ~KEY[0];
assign i_load_y = ~KEY[1];
assign i_load_c = ~KEY[2];
assign i_go = ~KEY[3];

UI_control init0
(
	.clk(clk),
	.i_load_x(i_load_x),
	.i_load_y(i_load_y),
	.i_load_c(i_load_c),
	.i_go(i_go),
	.o_load_x(o_load_x),
	.o_load_y(o_load_y),
	.o_load_c(o_load_c),
	.o_go(o_go),
	.o_init(o_init),
	.o_update_coords(o_update_coords),
	.outstate(STATE)
	
);

UI_datapath init1
(
	.clk(clk),
	.SW(SW[8:0]),
	.i_load_x(o_load_x),
	.i_load_y(o_load_y),
	.i_load_c(o_load_c),
	.i_go(o_go),
	.i_init(o_init),
	.i_update_coords(o_update_coords),
	.o_start(o_start),
	.o_x0(o_x0),
	.o_y0(o_y0),
	.o_x1(o_x1),
	.o_y1(o_y1),
	.o_colour(o_colour),
	.done(done)
);

endmodule

//**************************************
//*                                    *
//*          DATAPATH MODULE           *
//*                                    *
//**************************************
module UI_datapath
(
	input clk,
	input [8:0] SW,
	input i_load_x,
	input i_load_y,
	input i_load_c,
	input i_go,
	input i_init,
	input i_update_coords,
	output logic o_start,
	output logic [8:0] o_x0,
	output logic [7:0] o_y0,
	output logic [8:0] o_x1,
	output logic [7:0] o_y1,
	output logic [2:0] o_colour,
	input logic done
);

initial o_x0 = 9'b0;
initial o_y0 = 8'b0;
always_ff @ (posedge clk)begin
	if(i_init) begin
		//o_start <= 1'b0;
	end
	if(done)
		o_start <= 1'b0;
	if(i_update_coords) begin
		o_x0 <= o_x1;
		o_y0 <= o_y1;
	end
	
		if(i_load_x) 
			o_x1 <= SW[8:0];
		if (i_load_y)
			o_y1 <= SW[8:0];
		if(i_load_c)
			o_colour <= SW[2:0];
		if(i_go)
			o_start <= 1'b1;
end
endmodule


//**************************************
//*                                    *
//*        CONTROLPATH MODULE          *
//*                                    *
//**************************************
module UI_control
(
	input clk,
	input i_load_x,
	input i_load_y,
	input i_load_c,
	input i_go,
	output logic o_load_x,
	output logic o_load_y,
	output logic o_load_c,
	output logic o_go,
	output logic o_init,
	output logic o_update_coords,
	output logic [9:0] outstate
);


logic init;
enum int unsigned
{
	S_INIT,
	S_IDLE,
	S_WAITX,
	S_WAITY,
	S_WAITC,
	S_WAITGO,
	S_LOAD_X,
	S_LOAD_Y,
	S_LOAD_C,
	S_GO,
	S_X_IDLE,
	S_Y_IDLE,
	S_C_IDLE,
	S_GO_IDLE
	
} state, nextstate;

always_ff @ (posedge clk) begin

	state <= nextstate;
	
end 

always_comb begin
	
	nextstate = state;
	o_load_x = 1'b0;
	o_load_y = 1'b0;
	o_load_c = 1'b0;
	o_go = 1'b0;
	o_init = 1'b0;
	o_update_coords = 1'b0;
	outstate = 1'b0;
	
	case (state)
	
		S_INIT: begin
			o_init = 1'b1;
			outstate = 10'd1;
			nextstate = S_X_IDLE;
		end
		
		S_X_IDLE: begin
			outstate = 10'd2;
			if(i_load_x & ~i_load_c & ~i_load_y & ~i_go)
				nextstate = S_WAITX;
		end
		
		S_Y_IDLE: begin
			outstate = 10'd5;
			if(i_load_y & ~i_load_c & ~i_load_x & ~i_go) 
				nextstate = S_WAITY;
		end
		
		S_C_IDLE: begin
			outstate = 10'd8;
			if(i_load_c & ~i_load_x & ~i_load_y & ~i_go) 
				nextstate = S_WAITC;
		end
		
		S_GO_IDLE: begin
			outstate = 10'd11;
			if(i_go & ~i_load_c & ~i_load_y & ~i_load_x) 
				nextstate = S_WAITGO;
		end
		
		S_WAITX: begin
			outstate = 10'd3;
			if(~i_load_x) 
				nextstate = S_LOAD_X;	
		end
		
		S_WAITY: begin
			outstate = 10'd6;
			if (~i_load_y) 
				nextstate = S_LOAD_Y;
		end
		
		S_WAITC: begin
			outstate = 10'd9;
			if (~i_load_c) 
				nextstate = S_LOAD_C;
		end
			
		S_WAITGO: begin
			outstate = 10'd12;
			if (~i_go) 
				nextstate = S_GO;
		end
		
		S_LOAD_X: begin
			o_load_x = 1'b1;
			outstate = 10'd4;
			nextstate = S_Y_IDLE;
		end
			
		S_LOAD_Y: begin
			o_load_y = 1'b1;
			outstate = 10'd7;
			nextstate = S_C_IDLE;
		end
			
		S_LOAD_C: begin
			o_load_c = 1'b1;
			outstate = 10'd10;
			nextstate = S_GO_IDLE;
		end
			
		S_GO: begin
			o_go = 1'b1;
			o_update_coords = 1'b1;
			outstate = 10'd13;
			nextstate = S_INIT;
		end
			

	endcase
end

endmodule 